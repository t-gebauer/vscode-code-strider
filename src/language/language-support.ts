import {
    defineLanguage,
    LanguageDefinition,
} from "./language-definition"

// All supported languages must be listed here. A minimal definition simply declares that the language is supported.
// The language ids have to match VS Codes internal language ids.
// Additionally, an activation event should be registered in `package.json`.
// For each language a tree-sitter parser build has to be present in `<project-root>/wasm`, matching the pattern `tree-sitter-<language-id>.wasm`.
// These are usually generated by the Tree-sitter CLI: `tree-sitter build-wasm`.
const languages: Map<string, LanguageDefinition> = new Map(
    [
        defineLanguage("c"),
        defineLanguage("clojure"),
        defineLanguage("css"),
        defineLanguage("fennel"),
        defineLanguage("html"),
        defineLanguage("java"),
        defineLanguage("javascript"),
        // TODO: VSCode maps some json files to "jsonc" - JSON with comments.
        //       The normal "json" grammar should suffice. Even though the
        //       comments would be labeled as ERROR.
        defineLanguage("json"),
        // TODO: ignore / don't select "soft_line_break"s
        defineLanguage("markdown"),
        defineLanguage("nix"),
        defineLanguage("python"),
        defineLanguage("scss"),
        defineLanguage("typescript"),
    ].map((def: LanguageDefinition) => [def.languageId, def])
)

export namespace Languages {
    export function list(): string[] {
        return new Array(...languages.keys())
    }

    export function isSupported(languageId: string): boolean {
        return languages.has(languageId)
    }

    export function getDefinition(languageId: string): LanguageDefinition {
        const def = languages.get(languageId)
        if (!def) {
            throw new Error(`Missing language definition: ${languageId}`)
        }
        return def
    }
}
